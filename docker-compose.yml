version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: chatbot-postgres
    environment:
      POSTGRES_DB: restaurant_chatbot
      POSTGRES_USER: shirlain
      POSTGRES_PASSWORD: shirlain
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shirlain -d restaurant_chatbot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chatbot-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: chatbot-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
    networks:
      - chatbot-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chatbot-backend
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
    env_file:
      - ./backend/.env
    volumes:
      - ./backend/app:/app/app
      - ./backend/restaurant_info.json:/app/restaurant_info.json
      - ./credentials/service-account.json:/app/credentials/service-account.json:ro
    ports:
      - "8000:8000"
    networks:
      - chatbot-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:8000
        REACT_APP_WS_URL: ws://localhost:8000/ws
    container_name: chatbot-frontend
    depends_on:
      - backend
    ports:
      - "3000:3000"
    networks:
      - chatbot-network
    restart: unless-stopped

networks:
  chatbot-network:
    driver: bridge

volumes:
  postgres_data:
  qdrant_data:
